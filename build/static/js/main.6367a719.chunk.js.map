{"version":3,"sources":["component/PrimaryPhone.js","App.js","serviceWorker.js","index.js"],"names":["PrimaryPhone","props","handleChange","e","fields","state","target","name","value","setState","validateForm","errors","formIsValid","match","RegExp","test","length","console","log","submituserRegistrationForm","preventDefault","alert","method","onSubmit","this","type","username","onChange","className","emailid","mobileno","password","Component","App","handleSubmit","elements","firstName","trim","count","placeholder","defaultProps","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6367a719.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './PrimaryPhone.scss'\r\n\r\nclass PrimaryPhone extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            fields: {},\r\n            errors: {}\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        let fields = this.state.fields;\r\n        fields[e.target.name] = e.target.value;\r\n        this.setState({\r\n            fields\r\n        });\r\n    }\r\n    validateForm = () => {\r\n        let fields = this.state.fields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n        if (!fields[\"username\"]) {\r\n            formIsValid = false;\r\n            errors[\"username\"] = \"*Please enter your username.\";\r\n        }\r\n\r\n        if (typeof fields[\"username\"] !== \"undefined\") {\r\n            if (!fields[\"username\"].match(/^[a-zA-Z ]*$/)) {\r\n                formIsValid = false;\r\n                errors[\"username\"] = \"*Please enter alphabet characters only.\";\r\n            }\r\n        }\r\n\r\n        if (!fields[\"emailid\"]) {\r\n            formIsValid = false;\r\n            errors[\"emailid\"] = \"*Please enter your email-ID.\";\r\n        }\r\n\r\n        if (typeof fields[\"emailid\"] !== \"undefined\") {\r\n            //regular expression for email validation\r\n            var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n            if (!pattern.test(fields[\"emailid\"])) {\r\n                formIsValid = false;\r\n                errors[\"emailid\"] = \"*Please enter valid email-ID.\";\r\n            }\r\n        }\r\n\r\n        if (!fields[\"mobileno\"]) {\r\n            formIsValid = false;\r\n            errors[\"mobileno\"] = \"*Please enter your mobile no.\";\r\n        }\r\n\r\n        if (typeof fields[\"mobileno\"] !== \"undefined\") {\r\n            if (!fields[\"mobileno\"].match(/^[0-9]{10}$/)) {\r\n                formIsValid = false;\r\n                errors[\"mobileno\"] = fields[\"mobileno\"].length >10 ?  \"*Maximum lenght should be 10*\" : \"*Please enter valid mobile no.\";\r\n                console.log(fields[\"mobileno\"].length);\r\n            }\r\n        }\r\n\r\n        if (!fields[\"password\"]) {\r\n            formIsValid = false;\r\n            errors[\"password\"] = \"*Please enter your password.\";\r\n        }\r\n\r\n        if (typeof fields[\"password\"] !== \"undefined\") {\r\n            if (!fields[\"password\"].match(/^.*(?=.{8,})(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%&]).*$/)) {\r\n                formIsValid = false;\r\n                errors[\"password\"] = \"*Please enter secure and strong password.\";\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            errors: errors\r\n        });\r\n        return formIsValid;\r\n    }\r\n    submituserRegistrationForm = (e) => {\r\n        e.preventDefault();\r\n        if (this.validateForm()) {\r\n            let fields = {};\r\n            fields[\"username\"] = \"\";\r\n            fields[\"emailid\"] = \"\";\r\n            fields[\"mobileno\"] = \"\";\r\n            fields[\"password\"] = \"\";\r\n            this.setState({ fields: fields });\r\n            alert(\"Form submitted\");\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form method=\"post\" name=\"userRegistrationForm\" onSubmit={this.submituserRegistrationForm} >\r\n                    <label>FirstName</label>\r\n                    <input type=\"text\" name=\"username\" value={this.state.fields.username} onChange={this.handleChange} />\r\n                    <div className=\"errorMsg\">{this.state.errors.username}</div>\r\n\r\n                    <label>Email ID:</label>\r\n                    <input type=\"text\" name=\"emailid\" value={this.state.fields.emailid} onChange={this.handleChange} />\r\n                    <div className=\"errorMsg\">{this.state.errors.emailid}</div>\r\n\r\n                    <label>Mobile No:</label>\r\n                    <input type=\"text\" name=\"mobileno\" value={this.state.fields.mobileno} onChange={this.handleChange} />\r\n                    <div className=\"errorMsg\">{this.state.errors.mobileno}</div>\r\n\r\n                    <label>Password</label>\r\n                    <input type=\"password\" name=\"password\" value={this.state.fields.password} onChange={this.handleChange} />\r\n                    <div className=\"errorMsg\">{this.state.errors.password}</div>\r\n                    <input type=\"submit\" className=\"button\" value=\"Register\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PrimaryPhone\r\n","import React, { Component } from 'react'\nimport './App.css';\n// import ScrollComp from './component/ScrollComp'\nimport PrimaryPhone from './component/PrimaryPhone';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <Header/> */}\n        {/* <ScrollComp />\n         */}\n        <PrimaryPhone />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\nclass Header extends Component {\n  state = {\n    name: ''\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.setState({\n      name: e.target.elements.firstName.value.trim()\n    })\n    console.log(e.target.elements.firstName.value.trim())\n  }\n  render() {\n    return (\n      <div>\n        Welcome {this.state.name} count {this.props.count}\n        <form onSubmit={this.handleSubmit}>\n          <input type='text' name='firstName' placeholder='First Name'></input>\n          <button> Add Value </button>\n        </form>\n      </div>\n    )\n  }\n}\n\nHeader.defaultProps = {\n  count: 10 \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}